
───────────────────────────────────────────────────────
					Jenkins
───────────────────────────────────────────────────────




	※ 개발 환경의 종류

		① Local 	: 개발자가 개발을 하는 환경 (자신의 workspace 안에서 작업하는 방식)

		② DEV 	: 개발자들끼리 개발 내용에 대한 통합 테스트를 하는 Development 환경

		③ QA	: 개발이 끝나고 QA 엔지니어 및 내부 사용자들이 사용해 보기 위한 환경
		
		④ PROD	: 실제 유저가 사용하는 Production 환경



	※ 개발 프로세스

		① 개발자가 자신의 PC 에서 개발을 진행
		② 다른 개발자가 작성한 코드와 차이가 발생하지 않는지 내부 테스트 진행
		③ 진행한 내용을 다른 개발자들과 공유하기 위해 Git 과 같은 SCM에 업로드
			=> 흔히 dev 브랜치
		④ dev 브랜치의 내용을 개발 호나경에 배포하기 전에 테스트와 Lint 등 코드 포맷팅 진행
		⑤ 배포하기 위한 빌드 과정
		⑥ 코드 배포
		⑦ 테스트 진행
		⑧ 위 모든 과정을 DEV, QA, PROD 환경에서 모두 하고 각각에 맞는 환경에 배포



	※ 여러 배포 환경 관리의 핵심

		- 각 환경 간 차이점을 고려하여 환경변수로 관리

			ex) DB 계정 정보, SSH 정보, Hash 정보 등



/0/ 알아둘 것

	1. 젠킨스는 Java Runtime  위에서 동작하는 자동화 서버
	
		- 서버에 Java 가 설치되어 있거나 Docker 로 사용되어짐


	2. 빌드, 테스트, 배포 등 모든 것을 자동화 해주는 자동화 서버

	3. 다양한 플러그인들을 활용해서 각종 자동화 작업 처리

		※ 대표적인 플러그인

			- Credential Plugin
				: AWS token, Git access token 등을 저장해주는 플러그인
 
			- Git Plugin
			

	4. 일련의 자동화 작업의 순서들의 집합인 Pipeline 을 통해 CI/CD 파이프라인을 구축


	5. Section

		① Agent section

			- 여러 Jenkins 중 어떤 Jenkins 가 일을 하게 할 것인지 지정

			- 젠킨스 노드 관리에서 새로 노드를 띄우거나 혹은 docker 이미지등을 통해서 처리 할 수 있음

		② Post section

			- 스테이지가 끝난 이후(일말의 처리 과정)의 결과에 따라서 후속 조치를 취할 수 있음

				ex) success, failure, always, cleanup
					
					성공 시 성공 이메일, 실패 시 중단 혹은 건너뛰기 등등

				ex) 
					post {
						success {
							echo 'success'
						}
					}

		③ Stages section
		
			- 어떤 일들을 처리할 건지 일련의 stage를 정의

		④ Steps section
		
			- 한 스테이지 안에서의 단계로 일련의 스텝을 보여줌

		⑤ Declaratives

			- Environment 	: 어떤 pipeline 이나 stage scope 의 환경 변수 설정
			- Parameter 	: 파이프라인 실행 시 파라미터 받음
			- Triggers 	: 어떤 형태로 트리거 되는가
			- When 		: 언제 실행되는가





/1/ Jenkins 설치

			※※※ 업로드 테스트 시 S3 권한 편집 -> 퍼블릭 액세스 차단 비활성화

					* 끝나면 활성화 할 것! ( 돈 겁나 나감 )



	참고 : https://www.youtube.com/watch?v=GOLHN3FHjpI&ab_channel=SKplanetTacademy

		* 8분 12초에 스킵된 부분은 아래 명령어 참고

			명령어 : https://www.youtube.com/watch?v=GOLHN3FHjpI&t=61s
			이어보기 : https://www.youtube.com/watch?v=GOLHN3FHjpI&t=492s

	
	
		* 강의 소스 자료 : https://github.com/frontalnh/temp/blob/master/Jenkinsfile

		* 내 실습 자료 : https://github.com/W-O-R-D/git_jenkins_pipeline_test





	1. AWS EC2 인스턴스 구동

	2. 콘솔 접속 후 Jenkins, java, docker, git 설치	: 영상 참고

	3. 젠킨스 접속 후 기본 설정대로 젠킨스 설치

	4. Git hub 에서 젠킨스와 연결할 Git repo 생성

	5. 젠킨스가 접속할 수 있게 Personal access tokens 생성

		- repo 체크

	6. 젠킨스 -> Jenkins 관리 -> Manage Credentials -> Jenkins 클릭 -> Global credentials (unrestricted) 클릭 -> 사이드메뉴 Add Credentials 클릭
	
		Username = Git hub ID
		Password = 5. 에서 생성한 access token
		ID = Credential 구분을 위한 별칭 ( ex - gittest )


	7. local 환경에서 git clone

		- 강의 테스트 용으로 
			
			git clone https://github.com/frontalnh/temp.git . 	<< 강의용 코드 자료 / 현재 폴더에 클론 생성 명령어

			rm -rf .git	<< 이거 VS Code 에서 안먹히므로 폴더 들어가서 삭제

			git init

			git remote add origin https://github.com/W-O-R-D/git_jenkins_pipeline_test.git	<< git hub에서 내가 생성한 repo

			git status

			git add --all

			git commit -m "test"

			git push origin master



	8. Pipeline 코드 동작을 위해 AWS 보안 자격에 Jenkins 유저 추가

				( Jenkins 도 AWS 를 사용하는 '사용자' 인 개념 )

		AWS -> 내 보안 자격 증명 -> 사용자 -> 사용자 추가 -> 사용자 이름 : 'jenkins_test' -> 프로그래밍 방식 액세스 체크 -> 다음

		-> '기존 정책 직접 연결' 클릭 -> 'AdministratorAccess' 체크 ( 전체 권한 갖음 ) -> 다음

		-> 키 생략 -> 다음

		-> 사용자 만들기

		-> 액세스 키 ID, 비밀 액세스 키 확인

		-> Jenkins 에서 Add Credentials -> 정보 입력

				<액세스 키 ID>	
					Kind = secret text
					Secret = 액세스 키 ID
					ID = awsAccessKeyId
						│	└─> credentials() 의 매개 변수에 똑같이 ID 입력
						│	
						└─> 강의용 코드 자료 - 'Jenkinsfile' 中 AWS_ACCESS_KEY_ID = credentials('awsAccessKeyId')
				<비밀 액세스 키>	
					Kind = secret text
					Secret = 액세스 키 ID
					ID = awsSecretAccessKey
						│	└─> credentials() 의 매개 변수에 똑같이 ID 입력
						│	
						└─> 강의용 코드 자료 - 'Jenkinsfile' 中 AWS_SECRET_ACCESS_KEY = credentials('awsSecretAccessKey')
					

	9. S3 생성

		AWS -> S3 검색 -> " S3 " 선택 -> 버킷 만들기 -> 정보 입력
							버킷 이름 : 아무거나
							AWS 리전 : 서울 추천
							모든 퍼블릭 액세스 차단 : 체크해제
								│
								└─> ※ 실습 완료 후 다시 체크 ( 해제해두면 트래픽 발생해서 돈나감 )
		버킷 만들기 클릭 -> jenkins Pipeline 코드 파일에 S3 이름 입력
							│
							└─> 실습 자료 中 jenkinsfile 내에 주석 달아뒀음 ( stage('Deploy Frontend') 부분 )

			※ 메일 보내기 설정 ( Google )

				Jenkins 관리 -> 시스템 설정 -> Extended E-mail Notification 섹션에 메일 정보 세팅 (실습때는 패스)
				-> E-mail로 알려줌 섹션에 정보 입력 ( 고급 클릭 )
							SMTP 서버 : smtp.gmail.com
							Use SMTP Authentication 체크
								ID : 
								PW : 
							SMTP 포트 : 465

						* gmail 계정 보안 수준 낮은 앱 허용 설정 해야함


		실습 자료의 Jenkinsfile 에서 이메일 정보 변경 ( 누구에게 보낼 지 ) & 주석 참고



	10. Jenkins 플러그인 추가 설치

		Jenkins 관리 -> 플러그인 관리 -> 설치 가능 탭 클릭 -> Git(젠킨스 설치 시 추천 플러그인으로 설치됨), Docker, Docker Pipeline 설치 ( 다운로드 후 재시작 버튼 )



	11. EC2 에서 Docker 설치

		EC2 커맨드 라인 -> sudo yum install docker -> 이미 설치되었다고 뜰거임


	12. Docker 사용할 수 있는 그룹에 사용자 추가

		sudo usermod -a -G docker jenkins

		
		* 위 명령어 수행해도 Permission denied 뜨면

			sudo usermod -a -G docker $USER

			명령어 수행 후 인스턴스 재시작


	13. Docker 서비스 실행

		sudo service docker start 			****** Docekr 서비스 실행 중이어야 빌드 됨!!!!!!!!

	
	14. Jenkins 새로운 아이템 생성

		Jenkins 대쉬보드 -> 새로운 item 클릭 -> 아이템 이름 입력 -> Pipeline 선택

		-> GitHub Project 체크 -> git repo url 입력 ( ★ " .git " 제외 )
					│
					└─> 실습용 : https://github.com/W-O-R-D/git_jenkins_pipeline_test

		-> Build Triggers 섹션 -> Poll SCM 체크
					│
					├─> Schedule 섹션 내용은 수행 X 
					└─> Jenkinsfile 의 " triggers { pollSCM('*/3 * * * *') } " 이 수행됨

		-> Pipeline 섹션의 Script -> 실습 자료의 jenkinsfile 내용 복붙
				
				※ " Pipeline script from SCM " 선택 시 Git 에서 Jenkinsfile 가져올 수 있음



	15. Jenkins 구동 확인

		① 젠킨스와 연결된 Git의 로컬 폴더에서 PUSH 수행

		② 젠킨스 대쉬보드 접속

		③ 14. 에서 생성한 item 클릭

		④ Build Now 클릭

		⑤ ④ 완료 시 AWS 의 S3 에 파일들 업로드 되었는 지 확인

			* bugfix
				ⓐ gmail 계정 설정
					- 보안수준 낮은 앱 접속 허용 설정
					- SMTP 포트 465
				ⓑ """ -> ''' 으로 변경
				ⓒ stage('Only for production') 부분 주석 처리
				ⓓ EC2 인스턴스에 S3 액세스 권한 IAM 인스턴스 프로파일 적용
			
			* EC2 에서 
				docker ps 명령으로 도커 서버 동작 여부 확인하고,
				
				curl -w " - status code: %{http_code}, sizes: %{size_request}/%{size_download}" "http://localhost:80"

				명령 수행 시 status code 200 뜨면 성공이라 보면 됨


		★★★ 모두 정상 처리 됐는데 S3 에 파일이 업로드 안될 시

			EC2 인스턴스에 S3에 대한 액세스 권한을 부여하는 IAM 인스턴스 프로파일 적용

			https://aws.amazon.com/ko/premiumsupport/knowledge-center/ec2-instance-access-s3-bucket/



		☆☆☆ 이거 왜 S3에 파일 안올라가냐!?!?!?!?!?!?!?!??
	
			>>> 원인 파악

				EC2 의 " /var/lib/jenkins/workspace/testpipeline@3/website " 위치에서

				" aws s3 sync ./ s3://s3jenkinstest " 명령이 수행됨

				위의 위치에 파일 생성 후 jenkins에서 빌드 진행 시 해당 파일이 S3 에 업로드 되는 것 확인함

			




	※ 환경변수 관리

		Jenkins 관리 -> 시스템 설정 -> Environment variables 섹션




	※ EC2 의 인스턴스 프로필에 특정 IAM 권한을 부여하면 Credential 세팅 필요 없음

	










--------------------------------------------------------------------------------------

		Fast Campus 강의 필기

--------------------------------------------------------------------------------------


/1/ Jenkins 설치

	1. 젠킨스 서버 직접 설치

		https://hub.docker.com

			로그인 -> jenkins 검색 -> 검색 결과의 jenkins 클릭 -> "docker pull jenkins" 클릭


		※ 이후 과정 모름 ( AWS 강의에서 여기까지만 소개하고 로컬 설치 파트로 넘어감 )


	2. 젠킨스 로컬에 설치

		https://jenkins.io

		홈페이지 방문 후 다운로드 & 설치
			- Windows : http://localhost:8080	(기본설정)
			- macOS : Homebrew 이용하여 설치


		① Jenkins에 JDK 설정

			ⓐ 사이드메뉴 - Jenkins 관리 클릭
			ⓑ Global Tool Configuration 클릭
			ⓒ JDK 의 "Add JDK" 클릭
			　　※ 정보 입력
				name = java
				JDK Version = Java SE Development Kit 8u221 (국민버전)
				I agree  ~~~ 체크
				Please Enter your username/password 클릭
					-> 오라클 계정 정보 입력
			ⓓ Git 정보 입력
				Name = Default
				Path to Git executable = C:\Program Files\Git\bin (기본 설치 경로)

			ⓔ Maven 정보 입력
				Name = maven

				

	3. Test

		① 새로운 item 생성
				
			* free style project

		② 소스 코드 관리

			- Git 정보 입력

		③ Maven 세팅

			- Build > Invoke top-level Maven targets
			- Maven Version > 2) - ① - ⓔ 에 입력한 정보 선택
			- Goals > "package" 입력
			- 고급 버튼 클릭 > POM 입력 > pom.xml 파일의 위치 정보

		④ 저장 클릭

		⑤ 사이드 메뉴 > Build Now 클릭

			※ 사이드 메뉴 아래쪽에 "빌드#번호" 클릭 -> Console Output 클릭 시 자세한 정보 나옴
					